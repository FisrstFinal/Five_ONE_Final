<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="myPageDAO">
	<!-- =========================================== myPage 에서 부르는 리스트 =========================================== -->
	<select id="m_history_list" resultType="videoplayDTO" parameterType="String">
		select * from video_play join user_channel using (channel_code) where video_code in (select video_code from history where channel_code = #{code}) order by video_regdate desc
	</select>
	<select id="m_playlist_list" resultType="playlistDTO" parameterType="String">
		select distinct playlist_code, playlist_title from playlist where channel_code = #{code}
	</select>
	<select id="m_good_list" resultType="videoplayDTO" parameterType="String">
		select * from video_play join user_channel using (channel_code) where video_code in (select video_code from good where channel_code = #{code} and good_bad = 1)
	</select>
	<select id="m_reply_list" resultType="replyDTO" parameterType="String">
		select * from reply where channel_code = #{code}
	</select>
	<!-- =========================================== myPage 에서 부르는 채널 정보 =========================================== -->
	<select id="member_channel" resultType="channeldto" parameterType="String">
		select * from user_channel where channel_code = #{code}
	</select>
	<select id="channel_video" resultType="videoplayDTO" parameterType="String">
		select * from video_play join user_channel using (channel_code) where channel_code = #{code} order by video_regdate desc
	</select>
	<select id="channel_sub" resultType="videoplayDTO" parameterType="String">
		select * from subscribe where channel_code = #{code}
	</select>
	<!-- =============================================================================================================== -->
	<!-- ================================================ history 페이지 ================================================ -->
	<select id="getHistory_list" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by history_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join history using(video_code) where history.channel_code = #{code}) b ) where rnum >= #{startNo} and rnum <= #{endNo} order by history_date desc]]>
	</select>
	<select id="history_search" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by history_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join history using(video_code) where history.channel_code = #{code}) b where video_title like '%' || #{keyword} || '%') where rnum >= #{startNo} and rnum <= #{endNo} order by history_date desc]]>
	</select>
	<delete id="delete_history" parameterType="String">
		delete from history where channel_code = #{code}
	</delete>
	<delete id="history_search_one_delete" parameterType="Map">
		delete from history where video_code = #{video} and channel_code = #{channel}
	</delete>
	<!-- ================================================== good 페이지 ================================================== -->
	<select id="getGood_list_date" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 1) b ) where rnum >= #{startNo} and rnum <= #{endNo} order by good_date desc]]>
	</select>
	<select id="getGood_list_most" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 1) b ) where rnum >= #{startNo} and rnum <= #{endNo} order by video_good desc]]>
	</select>
	<select id="getGood_list_bad" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 2) b ) where rnum >= #{startNo} and rnum <= #{endNo} order by good_date desc]]>
	</select>
	<select id="good_search_date" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 1) b where video_title like '%' || #{keyword} || '%') where rnum >= #{startNo} and rnum <= #{endNo} order by good_date desc]]>
	</select>
	<select id="good_search_most" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 1) b where video_title like '%' || #{keyword} || '%') where rnum >= #{startNo} and rnum <= #{endNo} order by video_good desc]]>
	</select>
	<select id="good_search_bad" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by good_date desc) rnum from (select * from (video_play join user_channel using (channel_code)) inner join good using(video_code) where good.channel_code = #{code} and good.good_bad = 2) b where video_title like '%' || #{keyword} || '%') where rnum >= #{startNo} and rnum <= #{endNo} order by video_good desc]]>
	</select>
	<select id="getGood_num" parameterType="Map" resultType="String">
		select good_code from good where channel_code = #{channel} and video_code = #{video}
	</select>
	<select id="getGood_bad" parameterType="String" resultType="int">
		select good_bad from good where good_code = #{num}
	</select>
	<delete id="good_search_one_delete" parameterType="String">
		delete from good where good_code = #{num}
	</delete>
	<update id="removeGood" parameterType="String">
		<![CDATA[update video_play set video_good = video_good - 1 where video_code = #{video}]]>
	</update>
	<update id="removeBad" parameterType="String">
		<![CDATA[update video_play set video_bad = video_bad - 1 where video_code = #{video}]]>
	</update>
	<!-- ================================================== mainPage playlist 더보기 ================================================== -->
	<select id="getPlaylist_list" parameterType="Map" resultType="playlistDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by rownum) 
rnum from (select playlist_title, playlist_code, max(video_code) as video_code from playlist where channel_code = #{code} group by playlist_title, playlist_code)
b ) join video_play using (video_code) where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<!-- ============================================================== 재생목록 ============================================================== -->
	<select id="getPlaylist_new" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by playlist_regdate desc)
				rnum from (select * from (video_play join user_channel using (channel_code))
				inner join playlist using (video_code) where playlist_code = #{code})
				b ) where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<select id="getPlaylist_search" parameterType="Map" resultType="videoplayDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by playlist_regdate desc)
				rnum from (select * from (video_play join user_channel using (channel_code))
				inner join playlist using (video_code) where playlist_code = #{code})
				b where video_title like '%' || #{keyword} || '%') where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<delete id="playlist_search_one_delete" parameterType="Map">
		delete from playlist where video_code = #{video} and playlist_code = #{playlist}
	</delete>
	<delete id="delete_playlist" parameterType="String">
		delete from playlist where playlist_code = #{p_code}
	</delete>
	<delete id="delete_bundlelist" parameterType="String">
		delete from bundlelist where bundle_code = #{p_code}
	</delete>
	<!-- ============================================================= 구독 채널 ============================================================= -->
	<select id="getSubscribe_list" parameterType="Map" resultType="channeldto">
		<![CDATA[select * from (select b.*, row_number() over(order by channel_like desc)
				rnum from (select * from (subscribe join user_channel using (channel_code))
				where subscribe.member_code = #{code}) b )
				where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<delete id="delete_one_subscribe" parameterType="Map">
		delete from subscribe where channel_code = #{channel} and member_code = #{member}
	</delete>
	<!-- ========================================================= 내가 작성한 댓글 목록 ========================================================= -->
	<select id="getMy_reply_list" parameterType="Map" resultType="replyDTO">
		<![CDATA[select * from (select b.*, row_number() over(order by reply_regdate desc)
				rnum from (select reply_comment, reply_group, reply_code, video_code, video_play.video_img, reply.reply_regdate, video_play.video_title, reply.reply_cont, video_play.channel_code as video_owner 
				from reply join video_play using(video_code)
				where reply.channel_code = #{code}) b )
				where rnum >= #{startNo} and rnum <= #{endNo}]]>
	</select>
	<delete id="delete_one_reply" parameterType="String">
		delete from reply where reply_code = #{code}
	</delete>
	<delete id="delete_group_reply" parameterType="String">
		delete from reply where reply_group = #{group}
	</delete>
	<select id="getMy_reply_group" parameterType="String" resultType="String">
		select reply_group from reply where reply_code = #{code}
	</select>
	<select id="getMy_reply_comment" parameterType="String" resultType="int">
		select reply_comment from reply where reply_code = #{code}
	</select>
</mapper>

